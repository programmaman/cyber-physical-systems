<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

typedef struct
{
    int posx;
    int posy;
} Position;

const int dimX = 5;
const int dimY = 5;
const int numOfBlockedPositions = 5;

chan blocked, notblocked, requested;

bool ob;

//Configuration Vars

Position positionRequest;

//Blocked Positions Array
Position blockedPositions[numOfBlockedPositions] = {{1, 1}, {2, 2}, {3, 1}, {3, 3}, {4, 1}};

//Final Values

Position destinationPosition = {4, 4};</declaration>
	<template>
		<name x="5" y="5">OneSensRobot</name>
		<declaration>// Place local declarations here.

bool myGrid[5][5];
Position path[100];
int pathCounter = 0;

int[1, 4] direction = 1; // 1 = East, 2 = North, 3 = West, 4 = South

Position myPosition = {0, 0};

Position setNextPosition()
{

    if (myPosition.posx + 1 &lt; dimX)
    {
        if (myGrid[myPosition.posx + 1][myPosition.posy] == 0)
        {
            Position nextPosition = {myPosition.posx + 1, myPosition.posy};
            pathCounter++;
            return nextPosition;
        }
    }

    if (myPosition.posy + 1 &lt; dimY)
    {
        if (myGrid[myPosition.posx][myPosition.posy + 1] == 0)
        {
            Position nextPosition = {myPosition.posx, myPosition.posy + 1};
            pathCounter++;
            return nextPosition;
        }
    }

    if (myPosition.posx - 1 &gt; 0)
    {
        if (myGrid[myPosition.posx - 1][myPosition.posy] == 0)
        {
            Position nextPosition = {myPosition.posx - 1, myPosition.posy};
            pathCounter++;
            return nextPosition;
        }
    }

    if (myPosition.posy - 1 &gt; 0)
    {
        if (myGrid[myPosition.posx][myPosition.posy - 1] == 0)
        {
            Position nextPosition = {myPosition.posx, myPosition.posy - 1};
            pathCounter++;
            return nextPosition;
        }
    }
    else
        ;
    return path[pathCounter - 1];
}

void updateMyGrid(Position newPosition)
{

    path[pathCounter - 1] = myPosition;
    myPosition = newPosition;
    myGrid[myPosition.posx][myPosition.posy] = true;
}

void markGridPosition(Position blockedPosition)
{
    myGrid[blockedPosition.posx][blockedPosition.posy] = true;
}
</declaration>
		<location id="id0" x="-1105" y="-187">
			<name x="-1115" y="-221">idle</name>
			<committed/>
		</location>
		<location id="id1" x="-833" y="-187">
			<name x="-843" y="-221">request</name>
			<committed/>
		</location>
		<location id="id2" x="-833" y="34">
			<name x="-843" y="0">wait</name>
			<committed/>
		</location>
		<location id="id3" x="-1105" y="34">
			<name x="-1115" y="0">move</name>
			<committed/>
		</location>
		<location id="id4" x="-1419" y="34">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-1394" y="0">myPosition == destinationPosition</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-697" y="-144">blocked?</label>
			<label kind="assignment" x="-697" y="-110">markGridPosition(positionRequest)</label>
			<nail x="-697" y="34"/>
			<nail x="-697" y="-272"/>
			<nail x="-1105" y="-272"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-1360" y="-93">myPosition != destinationPosition</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-1003" y="17">notblocked?</label>
			<label kind="assignment" x="-1079" y="42">updateMyGrid(positionRequest)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-833" y="-93">requested!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-1079" y="-212">positionRequest = setNextPosition()</label>
		</transition>
	</template>
	<template>
		<name>Grid</name>
		<declaration>
bool grid[5][5];

void initializeGrid(Position blockedPosition[numOfBlockedPositions]){
for(i : int [0,numOfBlockedPositions - 1]) 
    {
        grid[blockedPosition[i].posx][blockedPosition[i].posy] = true;
    }
}

bool checkPosition(Position position){

int x = position.posx;
int y = position.posy;

if((x &gt; dimX || x &lt; 0) ||(y &gt; dimY || y &lt;0)){
    return true;
}

return grid[x][y];

}

</declaration>
		<location id="id5" x="-484" y="-76">
			<name x="-501" y="-60">Initial</name>
			<committed/>
		</location>
		<location id="id6" x="51" y="-8">
			<name x="25" y="8">Waiting</name>
			<committed/>
		</location>
		<location id="id7" x="51" y="357">
			<name x="41" y="323">Processing</name>
			<committed/>
		</location>
		<location id="id8" x="-501" y="357">
			<name x="-511" y="323">Done</name>
			<committed/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<nail x="-501" y="59"/>
			<nail x="-501" y="-8"/>
			<nail x="-102" y="-8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-255" y="425">ob == 0</label>
			<label kind="synchronisation" x="-263" y="442">notblocked!</label>
			<nail x="-59" y="459"/>
			<nail x="-382" y="459"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-255" y="229">ob == 1</label>
			<label kind="synchronisation" x="-255" y="246">blocked!</label>
			<nail x="-59" y="263"/>
			<nail x="-391" y="263"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="136" y="153">requested?</label>
			<label kind="assignment" x="59" y="170">ob = checkPosition(positionRequest)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="assignment" x="-238" y="-102">initializeGrid(blockedPositions)</label>
			<nail x="-331" y="-76"/>
			<nail x="51" y="-76"/>
		</transition>
	</template>
	<system>// Place template instantiations here.



// List one or more processes to be composed into a system.
system OneSensRobot, Grid;
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt; OneSensRobot.myPosition == destinationPosition</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] Grid.checkPosition(OneSensRobot.myPosition) != true
</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
