<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

//Object Model
typedef struct {
int x;
int y;
} Position; 
//Shared Position Object to facilitate messagePassing between Robot and Grid


//Channels
broadcast chan start; 
chan request, blocked, notblocked, tryagain, move;

//Configuration and Constant Variables

const int dimX = 5;
const int dimY = 5;
const int numberOfBlockedPositions = 5;

bool grid[dimX][dimY];





Position initialPosition = {0,0};
Position blockedPositions [numberOfBlockedPositions] ={{1,1},{2,2},{3,1},{3,3},{4,1}}; //Hold Blocked Positions for O(n) initialization


//Shared Variables


int requestPosX;
int requestPosY;

int rob1PosX, rob2PosX, rob1PosY, rob2PosY;

/*int lastPosX;
int lastPosY;

int myPosX;
int myPosY;
*/
bool robotMove;



//Functions
/*bool isOutOfBounds(int x, int y)
{
if(x &gt; dimX || x &lt; 0){
return true;
}
if(y &gt; dimY || y &lt; 0){
return true;
}
return false;
}
*/

bool isBlocked(int x, int y)
{
/*if(isOutOfBounds(x, y) == true){
return true;
}
*/
if (x &gt; dimX -1 || y &gt; dimY -1)
{
return true;
}

if (x &lt; 0 || y &lt; 0)
{
return true;
}

if(grid[x][y] == true){
return true;
}

return false;
}

/*bool isLastPosition(int x, int y)
{
if(lastPosX == x &amp;&amp; lastPosY == y){
return true;
}
return false;
}*/




</declaration>
	<template>
		<name>OneSensorRobot</name>
		<declaration>
int myPosX = 0;
int myPosY = 0;

int lastPosX;
int lastPosY;

//Variables for Back Tracking
int tempPosX;
int tempPosY;

int [0,4] directionToTest = 0; //0,1,2,3 = E, N, W, S

bool myGrid[5][5];


int destinationPosX = 3;
int destinationPosY = 4;

bool isLastPosition(int x, int y)
{
if(lastPosX == x &amp;&amp; lastPosY == y){
return true;
}
return false;
}

void setRequestPosition() {

if(directionToTest == 0)
    {
    requestPosX = myPosX + 1;
    requestPosY = myPosY;
    return;
    }

if(directionToTest == 1)
    {
    requestPosX = myPosX;
    requestPosY = myPosY + 1;
    return;
    }

if(directionToTest == 2)
    {
    requestPosX = myPosX - 1;
    requestPosY = myPosY;
    return;
    }

if(directionToTest == 3)
    {
    requestPosX = myPosX;
    requestPosY = myPosY - 1;
    return;
    }
}

bool isBlockedByMe(int x, int y){

if (x &gt; dimX -1 || y &gt; dimY -1)
{
return true;
}

if (x &lt; 0 || y &lt; 0)
{
return true;
}

if(myGrid[x][y] == true){
return true;
}

return false;

}</declaration>
		<location id="id0" x="-2244" y="94">
			<name x="-2337" y="76">BackTrack</name>
			<label kind="comments" x="-2584" y="102">This State Occurs when a Robot has to backtrack
to a previous position</label>
			<committed/>
		</location>
		<location id="id1" x="-1258" y="-68">
			<name x="-1268" y="-102">Move</name>
			<committed/>
		</location>
		<location id="id2" x="-2159" y="-68">
			<name x="-2185" y="-102">Sensing</name>
			<committed/>
		</location>
		<location id="id3" x="-858" y="-68">
			<name x="-892" y="-102">Complete</name>
		</location>
		<location id="id4" x="-2601" y="-68">
			<name x="-2611" y="-102">RobotOff</name>
		</location>
		<location id="id5" x="-1725" y="-238">
			<name x="-1768" y="-272">SendRequest</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-2057" y="-204">isLastPosition(requestPosX, requestPosY)== true ||
isBlockedByMe(requestPosX, requestPosY) == true</label>
			<label kind="synchronisation" x="-2057" y="-170">notblocked?</label>
			<label kind="assignment" x="-2057" y="-153">directionToTest = directionToTest + 1</label>
			<nail x="-1938" y="-153"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1836" y="-76">tryagain?</label>
			<label kind="assignment" x="-1836" y="-59">directionToTest = directionToTest + 1</label>
			<nail x="-1725" y="-76"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-1589" y="-255">isLastPosition(requestPosX, requestPosY)== false
&amp;&amp;
isBlockedByMe(requestPosX,requestPosY) == false</label>
			<label kind="synchronisation" x="-1589" y="-204">notblocked?</label>
			<label kind="assignment" x="-1589" y="-187">lastPosX = myPosX,
lastPosY = myPosY,
myPosX = requestPosX,
myPosY = requestPosY,
directionToTest = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-2159" y="-297">directionToTest &lt;= 3</label>
			<label kind="synchronisation" x="-2159" y="-280">request!</label>
			<label kind="assignment" x="-2159" y="-263">setRequestPosition()</label>
			<nail x="-2159" y="-238"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-2363" y="-7">directionToTest &gt; 3</label>
			<nail x="-2244" y="51"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-2023" y="136">myGrid[myPosX][myPosY] = true,
tempPosX = myPosX,
tempPosY = myPosY,
myPosX = lastPosX,
myPosY = lastPosY,
lastPosX = tempPosX,
lastPosY = tempPosY,
directionToTest = 0</label>
			<label kind="comments" x="-1793" y="144">mark backtracked position as blocked

move to last position

update last position</label>
			<nail x="-2244" y="127"/>
			<nail x="-1258" y="127"/>
			<nail x="-1258" y="59"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1513" y="-26">myPosX != destinationPosX ||
myPosY != destinationPosY</label>
			<nail x="-1317" y="17"/>
			<nail x="-2159" y="17"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-1173" y="-110">myPosX == destinationPosX &amp;&amp;
myPosY == destinationPosY</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-2558" y="-85">start?</label>
		</transition>
	</template>
	<template>
		<name>GridControllerUpdated</name>
		<declaration>void initializeGrid(Position blockedPosition[numberOfBlockedPositions]){
for(i : int [0,numberOfBlockedPositions - 1]) 
    {
        grid[blockedPosition[i].x][blockedPosition[i].y] = true;
    }
}</declaration>
		<location id="id6" x="-705" y="-42">
			<name x="-739" y="-76">Uninitialized</name>
			<committed/>
		</location>
		<location id="id7" x="-416" y="-42">
			<name x="-459" y="-76">Initialized</name>
		</location>
		<location id="id8" x="187" y="-42">
			<name x="177" y="-76">ProcessRequest</name>
			<committed/>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="17" y="8">isBlocked(requestPosX, requestPosY) == true</label>
			<label kind="synchronisation" x="17" y="25">tryagain!</label>
			<nail x="-127" y="59"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-229" y="-42">isBlocked(requestPosX, requestPosY) == false</label>
			<label kind="synchronisation" x="-229" y="-25">notblocked!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-161" y="-161">request?</label>
			<nail x="-136" y="-178"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-629" y="-42">start!</label>
			<label kind="assignment" x="-629" y="-25">initializeGrid(blockedPositions)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

robotOne = OneSensorRobot();
//robotTwo = OneSensorRobot2Collab();


//robotOneWithTwoTileSensor = RobotWithTwoTileSensor();
// List one or more processes to be composed into a system.
system GridControllerUpdated, 
robotOne;


//robotOneWithTwoTileSensor;
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt; (robotOne.Complete)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] grid[robotOne.myPosX][robotOne.myPosY] != 1
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] robotOne.myPosX &gt;= 0 and robotOne.myPosX &lt; dimX</formula>
			<comment>robotOne never exceeds the boundaries represented by 0, dimX, and dimY</comment>
		</query>
		<query>
			<formula>A[] robotOne.myPosY &gt;= 0 and robotOne.myPosY &lt; dimY</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
